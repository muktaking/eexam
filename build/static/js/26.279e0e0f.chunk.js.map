{"version":3,"sources":["components/exams/gallary/examCard.js","components/dashboard/bigCards/bigCard/bigCard.jsx","components/dashboard/bigCards/mainContentCards/examsFeaturedCard.jsx","components/dashboard/bigCards/mainContentCards/reportCard.jsx","components/dashboard/bigCards/sideCards/recentActivityCard.jsx","components/dashboard/bigCards/bigCards.jsx","components/dashboard/miniCards/miniInfoBlock/miniBlock/icon.js","components/dashboard/miniCards/miniInfoBlock/miniBlock/footer.js","components/dashboard/miniCards/miniInfoBlock/miniBlock/header.js","components/dashboard/miniCards/miniInfoBlock/miniBlock/index.js","components/dashboard/miniCards/miniInfoBlock/rank.js","components/dashboard/miniCards/miniInfoBlock/result.js","components/dashboard/miniCards/miniInfoBlock/totalExam.js","components/dashboard/miniCards/miniInfoBlock/upcomingExam.js","components/dashboard/miniCards/miniCards.jsx","container/dashboard/dashboard.jsx"],"names":["iconStyle","SocialShare","id","title","description","props","className","variant","style","fontSize","url","quote","hashtag","size","round","body","source","categoryTypeVariant","name","ExamCard","width","examId","imgSrc","categoryType","createdAt","free","examLoader","dispatch","useDispatch","token","useSelector","state","auth","intl","useIntl","useState","res","setRes","key","canActivate","rolePermitted","admin","Img","src","Body","Title","fontWeight","Subtitle","map","category","formatMessage","defaultMessage","moment","calendar","to","onClick","resetExamResultLoader","disabled","trigger","placement","overlay","PopoverWrapper","React","forwardRef","ref","as","Content","axios","baseURL","process","method","then","response","catch","error","JSON","stringify","BigCard","startDate","Date","endDate","startHandleChange","date","setState","endHandleChange","reportHandler","Accordion","defaultActiveKey","Card","Header","this","header","Toggle","Button","eventKey","icon","Collapse","showDatePicker","selected","onChange","children","Component","ExamsFeaturedCard","featuredExams","dashboard","headerColor","exam","index","length","min","max","Math","floor","random","imageUrl","ReportCard","userExamStat","data","labels","_","examTitles","datasets","label","stat","value","averageScore","totalMark","toFixed","fill","borderColor","backgroundColor","borderWidth","maxBarThickness","barPercentage","options","responsive","scales","yAxes","ticks","beginAtZero","SideCard","ListGroup","Item","color","Badge","attemptNumbers","lastAttemptTime","startOf","fromNow","BigCards","Row","Col","xl","lg","classes","footer","heading","Footer","cardHeader","Text","miniBlock","faIcon","footerHeading","footerValue","faFooterIcon","sm","rank","result","totalExam","upcomingExam","MiniCards","userExamInfo","format","connect","Dashboard","loading","setLoading","useEffect","getUserLoader","get","status","type","dashboardStudent","payload","e","console","log","Spinner","animation","role","RoutesConfig","metaInfo"],"mappings":"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","file":"static/js/26.279e0e0f.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport moment from 'moment';\r\nimport React, { useState } from 'react';\r\nimport { Badge, Button, Card, OverlayTrigger, Popover } from 'react-bootstrap';\r\nimport { FormattedMessage, useIntl } from \"react-intl\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport { EmailIcon, EmailShareButton, FacebookIcon, FacebookShareButton, LinkedinIcon, LinkedinShareButton, TwitterIcon, TwitterShareButton } from 'react-share';\r\nimport { resetExamResultLoader } from '../../../store/exams';\r\nimport { canActivate, rolePermitted } from '../../../utils/canActivate';\r\n\r\nconst iconStyle = {\r\n    size: 35,\r\n    round: true\r\n}\r\n\r\nconst SocialShare = ({id, title, description,...props})=> <div className=\"mt-3\" {...props}>\r\n\r\n    <hr />\r\n\r\n    <Badge variant=\"success\" className=\"mr-1 p-1\" style={{fontSize: '.8rem'}}>Share on</Badge>\r\n\r\n    <FacebookShareButton\r\n    url={\"/exams/\"+id}\r\n    quote={description}\r\n    hashtag={title}\r\n    className=\"mr-1\"\r\n    \r\n    >\r\n        <FacebookIcon size={iconStyle.size} round={iconStyle.round} />\r\n    </FacebookShareButton>\r\n\r\n    <TwitterShareButton\r\n    url={\"/exams/\"+id}\r\n    title={description}\r\n    hashtag={title}\r\n    className=\"mr-1\"\r\n    \r\n    >\r\n        <TwitterIcon size={iconStyle.size} round={iconStyle.round} />\r\n    </TwitterShareButton>\r\n\r\n    <EmailShareButton\r\n    url={\"/exams/\"+id}\r\n    body={description}\r\n    title={title}\r\n    className=\"mr-1\"\r\n    \r\n    >\r\n        <EmailIcon size={iconStyle.size} round={iconStyle.round} />\r\n    </EmailShareButton>\r\n\r\n    <LinkedinShareButton\r\n    url={\"/exams/\"+id}\r\n    source={\"/exams/\"+id}\r\n    body={description}\r\n    title={title}\r\n    className=\"mr-1\"\r\n    \r\n    >\r\n        <LinkedinIcon size={iconStyle.size} round={iconStyle.round} />\r\n    </LinkedinShareButton>\r\n\r\n</div>;\r\n\r\nconst categoryTypeVariant = (name)=>{\r\n    let variant = \"primary\"\r\n    switch (name) {\r\n        case 'Featured':\r\n            variant = \"warning\"\r\n            break;\r\n        case 'Free':\r\n            variant = \"secondary\"\r\n            break;\r\n    \r\n        default:\r\n            break;\r\n    }\r\n    return variant;\r\n}\r\n\r\nexport default function ExamCard({width=\"350px\", examId, imgSrc, title, categoryType, description, createdAt, free, examLoader}) {\r\n    const dispatch = useDispatch();\r\n    const token = useSelector(state=> state.auth.token);\r\n    const intl = useIntl();\r\n    const [res, setRes] = useState(null);\r\n\r\n    return (\r\n        <>\r\n            <Card key={examId} className=\"mr-2 mb-2\" style={{width:width}}>\r\n                {!canActivate(rolePermitted.admin, token) && <Card.Img\r\n                    variant=\"top\"\r\n                    src={imgSrc}\r\n                />}\r\n                <Card.Body>\r\n                    <div>\r\n                        <Card.Title style={{fontSize: '1.4rem' ,fontWeight: '900'}}>{title}</Card.Title>\r\n                        \r\n                        <Card.Subtitle>\r\n                        {categoryType &&\r\n                            categoryType.map((category) => (\r\n                            <Badge key={category.name} variant={categoryTypeVariant(category.name)} className=\"mr-1\">\r\n                                {category.name}\r\n                            </Badge>\r\n                            ))}\r\n                        </Card.Subtitle>\r\n\r\n                    </div>\r\n                    \r\n                    <div className=\"mt-1 pt-2\">\r\n                        <p className=\"\">{description} </p>\r\n                \r\n                        <p className=\"text-muted text-right\">\r\n                            {intl.formatMessage({id: 'db.so', defaultMessage: \"Start on\"})} : {moment(createdAt).calendar()}\r\n                        </p>\r\n                    </div>\r\n        \r\n                    {!canActivate(rolePermitted.admin, token) && <> \r\n                            <div className=\"d-flex justify-content-around\">\r\n                                <Link  className=\"text-white\" to={(free ? \"/exams/free/\" : \"/exams/\") + examId}>\r\n                                    <Button variant=\"outline-primary\" onClick={()=>{\r\n                                        dispatch(resetExamResultLoader());\r\n                                        }}>\r\n                                            <FormattedMessage id=\"btn.start\" defaultMessage=\"Start Exam\"/>\r\n                                    </Button>\r\n                                </Link>\r\n                                <Link className=\"text-white\" to={\"/result/rank/\" + examId}>\r\n                                    <Button onClick={()=>{dispatch(resetExamResultLoader())}} variant=\"outline-dark\">\r\n                                        <FormattedMessage id=\"btn.rank\" defaultMessage=\"Rank\"/>\r\n                                    </Button>\r\n                                </Link>\r\n                                \r\n                            </div>\r\n                            <SocialShare id={examId} title={title} description={description} />                    \r\n                        </> \r\n                    }\r\n\r\n                    {canActivate(rolePermitted.admin, token) && <div>\r\n                            <Button disabled={true} variant=\"primary\" className=\"mr-3\" >\r\n                                Edit\r\n                            </Button>\r\n                            <OverlayTrigger trigger=\"click\" placement=\"top\" overlay={<PopoverWrapper id={examId} res={res} setRes={setRes} token={token} examLoader={examLoader} />}>\r\n                                <Button onClick={()=>{dispatch(resetExamResultLoader())}} variant=\"danger\">\r\n                                    Delete\r\n                                </Button>\r\n                            </OverlayTrigger>    \r\n                            \r\n                        </div>}\r\n                </Card.Body>\r\n            </Card>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\nconst PopoverWrapper = React.forwardRef(({id, res, setRes, token, examLoader, ...props}, ref)=>(\r\n    <Popover id=\"popover-basic\" ref={ref} {...props} >\r\n      <Popover.Title as=\"h3\">Are You Sure To delete The Exam</Popover.Title>\r\n      <Popover.Content>\r\n          <p>\r\n              {res}\r\n          </p>\r\n        <Button variant=\"danger\" onClick={()=>{\r\n            //setAuthorizationToken(token);\r\n            axios({\r\n                baseURL: process.env.REACT_APP_SITE_URL,\r\n                url: '/exams/' + id,\r\n                method: 'delete',\r\n              })\r\n            .then(response=>{\r\n                examLoader();\r\n                setRes(\"Successfully Deleted\");\r\n            })\r\n            .catch(error=>{\r\n                setRes(\"Can not delete the exam\"+ JSON.stringify(error));\r\n            })\r\n        }}>Yes</Button>\r\n      </Popover.Content>\r\n    </Popover>\r\n  ));\r\n  ","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { Component } from \"react\";\r\nimport Accordion from \"react-bootstrap/Accordion\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n// CSS Modules, react-datepicker-cssmodules.css\r\n// import 'react-datepicker/dist/react-datepicker-cssmodules.css';\r\n\r\nclass BigCard extends Component {\r\n  state = {\r\n    startDate: new Date(),\r\n    endDate: new Date(),\r\n  };\r\n\r\n  startHandleChange = (date) => {\r\n    this.setState({\r\n      startDate: date,\r\n    });\r\n  };\r\n  endHandleChange = (date) => {\r\n    this.setState({\r\n      endDate: date,\r\n    });\r\n  };\r\n  reportHandler = () => {\r\n    //console.log(this.state.startDate, this.state.endDate);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Accordion defaultActiveKey=\"0\" className=\"mb-3\">\r\n        <Card className=\"border-top-0\">\r\n          <Card.Header className={\"bg-dark\" + \" text-light\"}>\r\n            <div className=\"d-flex justify-content-between\">\r\n              {this.props.header}\r\n              <Accordion.Toggle as={Button} variant=\"link\" eventKey=\"0\">\r\n                <FontAwesomeIcon\r\n                  icon={\"bars\"}\r\n                  size=\"lg\"\r\n                  className=\"text-light\"\r\n                />\r\n              </Accordion.Toggle>\r\n              {/* <span className=\"\">More..</span> */}\r\n            </div>\r\n          </Card.Header>\r\n          <Accordion.Collapse eventKey=\"0\">\r\n            <Card.Body>\r\n              {this.props.showDatePicker && (\r\n                <div className=\"d-flex flex-wrap justify-content-between mb-3\">\r\n                  <div>\r\n                    <span>Start Date:</span>\r\n                    <FontAwesomeIcon\r\n                      icon={\"calendar-alt\"}\r\n                      size=\"2x\"\r\n                      className=\"mx-2\"\r\n                    />\r\n                    <DatePicker\r\n                      selected={this.state.startDate}\r\n                      onChange={this.startHandleChange}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <span className=\"\">End Date:</span>\r\n                    <FontAwesomeIcon\r\n                      icon={\"calendar-alt\"}\r\n                      size=\"2x\"\r\n                      className=\"mx-2\"\r\n                    />\r\n                    <DatePicker\r\n                      selected={this.state.endDate}\r\n                      onChange={this.endHandleChange}\r\n                    />\r\n                  </div>\r\n\r\n                  <Button onClick={this.reportHandler}>Show</Button>\r\n                </div>\r\n              )}\r\n              <hr />\r\n              {this.props.children}\r\n            </Card.Body>\r\n          </Accordion.Collapse>\r\n        </Card>\r\n      </Accordion>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BigCard;\r\n","import React from \"react\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { useSelector } from \"react-redux\";\r\nimport ExamCard from \"../../../exams/gallary/examCard\";\r\nimport BigCard from \"../bigCard/bigCard\";\r\n\r\n\r\nfunction getRndInteger(min, max) {\r\n  return Math.floor(Math.random() * (max - min) ) + min;\r\n}\r\n\r\n\r\nconst ExamsFeaturedCard = () => {\r\n  const featuredExams = useSelector((state) => state.dashboard.featuredExams);\r\n  const intl = useIntl();\r\n\r\n  return (\r\n    <BigCard\r\n      header={intl.formatMessage({id: 'db.fe', defaultMessage: \"Featured Exams\"})}\r\n      headerColor={\"primary\"}\r\n      showDatePicker={false}\r\n    >\r\n      <div  className=\"d-flex justify-content-around flex-wrap\">\r\n        {featuredExams.map((exam, index) => (\r\n            <ExamCard\r\n              key={exam.id}\r\n              examId = {exam.id} \r\n              imgSrc = {exam.categoryType.length > 0 ? process.env.REACT_APP_SITE_URL+\"/\"+ exam.categoryType[getRndInteger(0,exam.categoryType.length)].imageUrl : '/assets/image/uncat.jpg'}\r\n              title = {exam.title}\r\n              categoryType = {exam.categoryType.length > 0 ? exam.categoryType : [{name: 'Uncategorized'}]}\r\n              description = {exam.description}\r\n              createdAt = {exam.createdAt}\r\n            />\r\n        ))}\r\n      </div>\r\n    </BigCard>\r\n  );\r\n};\r\n\r\nexport default ExamsFeaturedCard;\r\n","import * as _ from \"lodash\";\r\nimport React from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { useSelector } from \"react-redux\";\r\nimport BigCard from \"../bigCard/bigCard\";\r\n\r\nconst ReportCard = (props) => {\r\n  const userExamStat = useSelector((state) => state.dashboard.userExamStat);\r\n  const intl = useIntl();\r\n\r\n  const examTitles = userExamStat\r\n    ? _.map(userExamStat.examTitles, \"title\")\r\n    : [];\r\n  const mark = userExamStat\r\n    ? _.map(\r\n        userExamStat.stat,\r\n        (value) => +((value.averageScore / value.totalMark) * 100).toFixed(2)\r\n      )\r\n    : [];\r\n  //const stat = userExamStat ? _.map(userExamStat.stat, \"averageScore\") : [];\r\n\r\n  const options = {\r\n    responsive: true, // Instruct chart js to respond nicely.\r\n    scales: {\r\n      yAxes: [\r\n        {\r\n          ticks: {\r\n            beginAtZero: true,\r\n            min: 0,\r\n            max: 100,\r\n          },\r\n        },\r\n      ],\r\n    },\r\n  };\r\n  const data = {\r\n    labels: examTitles,\r\n    datasets: [\r\n      {\r\n        label: \"Marks in Percentage\", // Name the series\r\n        data: mark, // Specify the data values array\r\n        fill: false,\r\n        borderColor: \"#2196f3\", // Add custom color border (Line)\r\n        backgroundColor: \"#2196f3\", // Add custom color background (Points and Fill)\r\n        borderWidth: 1, // Specify bar border width\r\n        maxBarThickness: 35,\r\n        barPercentage: 0.5,\r\n      },\r\n    ],\r\n  };\r\n\r\n  return (\r\n    <BigCard header={intl.formatMessage({id: 'db.ur', defaultMessage: \"User Reports\"})} headerColor={\"info\"} showDatePicker={false}>\r\n      <Bar data={data} options={options} />\r\n    </BigCard>\r\n  );\r\n};\r\n\r\nexport default ReportCard;\r\n","import moment from \"moment\";\r\nimport React from \"react\";\r\nimport { Badge } from \"react-bootstrap\";\r\nimport ListGroup from \"react-bootstrap/ListGroup\";\r\nimport { MdInfo } from \"react-icons/md\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { useSelector } from \"react-redux\";\r\nimport BigCard from \"../bigCard/bigCard\";\r\n\r\nconst SideCard = (props) => {\r\n  const userExamStat = useSelector((state) => state.dashboard.userExamStat);\r\n  const intl = useIntl();\r\n\r\n  const examTitles = userExamStat ? userExamStat.examTitles : [];\r\n  const stat = userExamStat ? userExamStat.stat : [];\r\n\r\n  return (\r\n    <BigCard\r\n      header={intl.formatMessage({id: 'db.ra', defaultMessage: \"Recent Activity\"})}\r\n      headerColor={\"warning\"}\r\n      showDatePicker={false}\r\n    >\r\n      <ListGroup as=\"ul\" variant=\"flush\">\r\n        {examTitles &&\r\n          examTitles.map((exam, index) => {\r\n            if (index < 6)\r\n              return (\r\n                <ListGroup.Item key={index} as=\"li\" className=\"\">\r\n                  {/* <Badge variant=\"info\" className=\"rounded p-1\"> */}\r\n                  <MdInfo size=\"1.5em\" color=\"magenta\" />\r\n                  {/* </Badge> */}\r\n                  <Badge variant=\"light\">{exam.title}</Badge>Exam attempted{\" \"}\r\n                  <Badge variant=\"danger\">{stat[index].attemptNumbers}</Badge>{\" \"}\r\n                  times.\r\n                  <p className=\"text-muted pl-3\" style={{ fontSize: \"80%\" }}>\r\n                    last attempt{\" \"}\r\n                    {moment(stat[index].lastAttemptTime)\r\n                      .startOf(\"day\")\r\n                      .fromNow()}\r\n                  </p>\r\n                </ListGroup.Item>\r\n              );\r\n          })}\r\n      </ListGroup>\r\n    </BigCard>\r\n  );\r\n};\r\n\r\nexport default SideCard;\r\n","import React from \"react\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport ExamFeaturedCard from \"./mainContentCards/examsFeaturedCard\";\r\nimport ReportCard from \"./mainContentCards/reportCard\";\r\nimport RecentActivityCard from \"./sideCards/recentActivityCard\";\r\n\r\n\r\nconst BigCards = (props) => {\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col xl={8} lg={12}>\r\n          <ReportCard />\r\n          <hr />\r\n          <ExamFeaturedCard />\r\n          <hr />\r\n        </Col>\r\n        <Col xl={4}>\r\n          <RecentActivityCard />\r\n          <hr />\r\n        </Col>\r\n      </Row>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BigCards;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//import { icon } from \"@fortawesome/fontawesome-svg-core\";\r\n\r\nconst icon = ({ icon, size, classes }) => (\r\n  <FontAwesomeIcon icon={icon} size={size} className={classes} />\r\n);\r\nexport default icon;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Icon from \"./icon\";\r\n\r\nconst footer = ({ color, heading, value, icon }) => {\r\n  return (\r\n    <Card.Footer className={\"bg-dark\" + \" text-light text-right\"}>\r\n      <span className=\"mr-2\">{heading}</span>\r\n      <span className=\"mr-5\">{value}</span>\r\n      <Icon icon={icon} size=\"md\" className=\"mr-2\" />\r\n    </Card.Footer>\r\n  );\r\n};\r\n\r\nexport default footer;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst cardHeader = ({ heading, color, value, id }) => (\r\n  <Card.Text className=\"text-right text-secondary\">\r\n    <h5>{heading}</h5>\r\n    <h3 className={\"text-\" + color}>{id ? <Link to ={\"exams/\"+id}> {value} </Link> : value}</h3>\r\n  </Card.Text>\r\n);\r\n\r\nexport default cardHeader;\r\n","import React from \"react\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Footer from \"./footer\";\r\nimport Header from \"./header\";\r\nimport Icon from \"./icon\";\r\n\r\n\r\nconst miniBlock = ({\r\n  heading,\r\n  color,\r\n  value,\r\n  id,\r\n  faIcon,\r\n  footerHeading,\r\n  footerValue,\r\n  faFooterIcon,\r\n}) => {\r\n  return (\r\n    <Card className=\"card-common mt-2\" >\r\n      <Card.Body>\r\n        <Row>\r\n          <Col sm={8}>\r\n            <Header heading={heading} color={color} value={value} id={id}/>\r\n          </Col>\r\n          <Col sm={4}>\r\n            <div className=\"d-flex  align-items-center justify-content-end h-100\">\r\n              <Icon icon={faIcon} size={\"3x\"} classes={\"text-\" + color} />\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </Card.Body>\r\n      <Footer\r\n        color={color}\r\n        heading={footerHeading}\r\n        value={footerValue}\r\n        icon={faFooterIcon}\r\n      />\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default miniBlock;\r\n","import React from \"react\";\r\nimport { useIntl } from 'react-intl';\r\nimport MiniBlock from \"./miniBlock\";\r\n\r\n\r\nconst rank = ({ value, footerValue }) => {\r\n  const intl = useIntl();\r\n  return (\r\n    <MiniBlock\r\n      heading={intl.formatMessage({id: \"db.er\", defaultMessage: \"Your Rank\"})}\r\n      //\r\n      value={value}\r\n      //\r\n      faIcon={\"medal\"}\r\n      footerHeading={intl.formatMessage({id: 'db.ts', defaultMessage: \"Your Rank\"})}\r\n      footerValue={footerValue}\r\n      color={\"warning\"}\r\n      faFooterIcon={\"users\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default rank;\r\n","import React from \"react\";\r\nimport { useIntl } from 'react-intl';\r\nimport MiniBlock from \"./miniBlock\";\r\n\r\nconst result = ({ value, footerValue }) => {\r\n  const intl = useIntl();\r\n  return (\r\n    <MiniBlock\r\n      heading={intl.formatMessage({id: \"db.os\", defaultMessage: \"Overall Score\"})}\r\n      //\r\n      value={value}\r\n      //\r\n      faIcon={\"poll\"}\r\n      footerHeading={intl.formatMessage({id: \"db.of\", defaultMessage: \"Out of\"})}\r\n      footerValue={footerValue}\r\n      color={\"dark\"}\r\n      faFooterIcon={\"balance-scale\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default result;\r\n","import React from \"react\";\r\nimport { useIntl } from 'react-intl';\r\nimport MiniBlock from \"./miniBlock\";\r\n\r\n\r\nconst totalExam = ({ value, footerValue }) => {\r\n  const intl = useIntl();\r\n  \r\n\r\n  return (\r\n    <MiniBlock\r\n      heading={intl.formatMessage({id: 'db.te', defaultMessage: \"Total Exams\"})}\r\n      value={value}\r\n      faIcon={\"file-alt\"}\r\n      footerHeading={intl.formatMessage({id: 'db.et', defaultMessage: \"Exam Taken\"})}\r\n      footerValue={footerValue}\r\n      color={\"info\"}\r\n      faFooterIcon={\"file-import\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default totalExam;\r\n","import React from \"react\";\r\nimport { useIntl } from 'react-intl';\r\nimport MiniBlock from \"./miniBlock\";\r\n\r\n\r\n\r\nconst upcomingExam = ({ value, footerValue,id }) => {\r\n  const intl = useIntl();\r\n  return (\r\n    <MiniBlock\r\n      heading={intl.formatMessage({id: \"db.le\", defaultMessage: \"Latest Exam\"})}\r\n      //\r\n      value={value}\r\n      //\r\n      id={id}\r\n      faIcon={\"file\"}\r\n      footerHeading={intl.formatMessage({id: 'db.so', defaultMessage: \"Start On\"})}\r\n      footerValue={footerValue}\r\n      color={\"success\"}\r\n      faFooterIcon={\"clock\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default upcomingExam;\r\n","import moment from \"moment\";\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Rank from \"./miniInfoBlock/rank\";\r\nimport Result from \"./miniInfoBlock/result\";\r\nimport TotalExam from \"./miniInfoBlock/totalExam\";\r\nimport UpcomingExam from \"./miniInfoBlock/upcomingExam\";\r\n\r\n\r\n\r\nclass MiniCards extends Component {\r\n  componentDidMount() {\r\n    \r\n  }\r\n\r\n  render() {\r\n    const { totalExam, rank, upcomingExam, result } = this.props.userExamInfo;\r\n    return (\r\n          <div className=\"d-md-flex justify-content-around flex-wrap\">\r\n            <TotalExam value={totalExam[0]} footerValue={totalExam[1]} />\r\n            <Rank value={rank[0]} footerValue={rank[1]} />\r\n            <UpcomingExam\r\n                value={upcomingExam[0]}\r\n                id={upcomingExam[2]}\r\n                footerValue={moment(upcomingExam[1]).format(\"DD-MM-YYYY\")}\r\n              />\r\n              <Result value={result[0]} footerValue={result[1]} />\r\n          </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n  };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    userExamInfo: state.dashboard.userExamInfo,\r\n\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MiniCards);\r\n","import axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport BigCards from \"../../components/dashboard/bigCards/bigCards\";\r\nimport MiniCards from \"../../components/dashboard/miniCards/miniCards\";\r\nimport MetaInfo from \"../../components/seo/metainfo\";\r\nimport { RoutesConfig } from \"../../config/routes.config\";\r\nimport { dashboardStudent } from \"../../store/dashboard\";\r\nimport { resetExamResultLoader } from \"../../store/exams\";\r\nimport { getUserLoader } from \"../../store/user\";\r\n\r\nconst Dashboard = (props) => {\r\n  const [loading, setLoading] = useState(false);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(resetExamResultLoader());\r\n    dispatch(getUserLoader());\r\n    setLoading(true);\r\n    axios\r\n      .get(process.env.REACT_APP_SITE_URL + \"/dashboard\")\r\n      .then((response) => {\r\n        setLoading(false);\r\n        if (response.status === 200) {\r\n          dispatch({ type: dashboardStudent.type, payload: response.data });\r\n        }\r\n      })\r\n      .catch((e) => {\r\n        setLoading(false);\r\n        console.log(e)\r\n      });\r\n  },[]);\r\n\r\n  return (\r\n    <div className=\"\">\r\n      {\r\n        loading && <Spinner\r\n        animation=\"grow\"\r\n        role=\"status\"\r\n        variant=\"dark\"\r\n        className=\"content-center\"\r\n       >\r\n       </Spinner>\r\n      }\r\n      <MetaInfo {...RoutesConfig.Dashboard.metaInfo} />\r\n\r\n      <MiniCards />\r\n      <hr className=\"my-3\" />\r\n      <BigCards />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}