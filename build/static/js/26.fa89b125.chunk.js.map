{"version":3,"sources":["components/navbar/navbarHome.jsx","container/registration/reset.js"],"names":["connect","state","isAuthenticated","auth","token","props","intl","useIntl","itemsName","formatMessage","id","defaultMessage","pagesName","pages","bg","variant","fixed","expand","to","className","process","Toggle","aria-controls","Collapse","map","value","index","Item","key","as","isLanding","activeClass","spy","smooth","offset","duration","href","activeClassName","pathname","showUnder","icon","size","transform","Reset","useParams","useState","password","setPassword","repeatPassword","setRepeatPassword","formErrors","setFormErrors","resStyle","setResStyle","changeHandler","e","name","target","msg","validator","matches","Prepend","Text","placeholder","type","aria-label","aria-describedby","onChange","onClick","axios","post","then","response","data","message","setTimeout","history","push","catch","error"],"mappings":"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","file":"static/js/26.fa89b125.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React from \"react\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport { useIntl } from \"react-intl\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, NavLink } from \"react-router-dom\";\r\nimport { HashLink } from \"react-router-hash-link\";\r\n//import Scrollspy from \"react-scrollspy\";\r\nimport { Link as LinkScroll } from \"react-scroll\";\r\nimport ScrollToTop from 'react-scroll-up';\r\n\r\n//import Spinner from \"react-bootstrap/Spinner\";\r\n//import \"./navbarLanding.css\";\r\n\r\nconst navbarHome = (props) => {\r\n  const intl = useIntl()\r\n  const itemsName = [intl.formatMessage({id: 'btn.home', defaultMessage: \"home\"}),intl.formatMessage({id: 'btn.contact', defaultMessage: \"contact\"})];\r\n  const pagesName = props.isAuthenticated\r\n    ? [intl.formatMessage({id:'btn.db',defaultMessage: \"dashboard\"}), \r\n    intl.formatMessage({id: 'btn.exams', defaultMessage: \"exams\"}),\r\n    intl.formatMessage({id: 'btn.logout', defaultMessage: \"logout\"})]\r\n    : [\r\n      intl.formatMessage({id: 'btn.exams', defaultMessage: \"exams\"}),\r\n      intl.formatMessage({id: 'btn.signup', defaultMessage: \"signup\"}), \r\n      intl.formatMessage({id: 'btn.login', defaultMessage: \"login\"})];\r\n  const items = [\"home\", \"contact\"];\r\n  const pages = props.isAuthenticated\r\n    ? [\"dashboard\",\"exams\" ,\"logout\"]\r\n    : [\"exams\",\"signup\", \"login\"];\r\n\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\" expand=\"md\">\r\n      {/* {props.auth.loading && (\r\n        <Spinner\r\n          animation=\"border\"\r\n          role=\"status\"\r\n          variant=\"light\"\r\n          className=\"mr-2\"\r\n        ></Spinner>\r\n      )} */}\r\n      <Link to=\"/\" className=\"navbar-brand\">\r\n        {process.env.REACT_APP_NAME}\r\n      </Link>\r\n      <Navbar.Toggle aria-controls=\"navbarResponsive\" />\r\n      <Navbar.Collapse id=\"navbarResponsive\">\r\n        <Nav className=\"ml-auto\">\r\n          {/* <Scrollspy\r\n          items={items}\r\n          currentClassName={\"active\"}\r\n          className=\"navbar-nav ml-auto\"\r\n          offset={-80}\r\n        > */}\r\n          {items.map((value, index) => (\r\n            <Nav.Item key={value} as=\"li\" className=\"mr-3\">\r\n              {props.isLanding ? (\r\n                <LinkScroll\r\n                  activeClass=\"active\"\r\n                  to={value}\r\n                  spy={true}\r\n                  smooth={true}\r\n                  offset={-50}\r\n                  duration={500}\r\n                  // //onSetActive={this.handleSetActive}\r\n                  href={\"/\"}\r\n                  className=\"nav-link\"\r\n                  //to={{ pathname: \"/\" }}\r\n                >\r\n                  {itemsName[index]}\r\n                </LinkScroll>\r\n              ) : (\r\n                <HashLink\r\n                  to={\"/#\" + value}\r\n                  className=\"nav-link\"\r\n                  activeClassName=\"active\"\r\n                >\r\n                  {itemsName[index]}\r\n                </HashLink>\r\n              )}\r\n            </Nav.Item>\r\n          ))}\r\n          {pages.map((value,index) => (\r\n            <Nav.Item key={value} as=\"li\" className=\"mr-3\">\r\n              <NavLink\r\n                // href={\"/\" + value}\r\n                to={{ pathname: \"/\" + value }}\r\n                className=\"nav-link\"\r\n              >\r\n                {pagesName[index]}\r\n              </NavLink>\r\n            </Nav.Item>\r\n          ))}\r\n          {/* </Scrollspy> */}\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n      {props.isLanding ? (\r\n        <ScrollToTop showUnder={160}>\r\n          <FontAwesomeIcon icon={\"arrow-up\"} size=\"3x\" transform=\"shrink-4\" />\r\n        </ScrollToTop>\r\n      ) : null}\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    isAuthenticated: state.auth.token !== null,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(navbarHome);\r\n","import axios from \"axios\";\r\nimport React, { useState } from 'react';\r\nimport { Alert, Button, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { CgPassword } from \"react-icons/cg\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport validator from \"validator\";\r\nimport \"../../assets/scss/section/registration.scss\";\r\nimport NavbarHome from '../../components/navbar/navbarHome';\r\n\r\n\r\n\r\nexport default function Reset({...props}) {\r\n    let {id} = useParams();\r\n    const [password, setPassword] = useState(null);\r\n    const [repeatPassword, setRepeatPassword] = useState(null);\r\n    const [formErrors, setFormErrors] = useState(\"\");\r\n    const [resStyle, setResStyle] = useState('danger');\r\n  \r\n    const changeHandler = (e)=>{\r\n      const name = e.target.name;  \r\n      const value = e.target.value;\r\n      let msg = \"\";\r\n      switch (name) {\r\n          case 'password':\r\n           msg += validator.matches(\r\n                value,\r\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{6,})/\r\n              )\r\n                ? \"\"\r\n                : \"Password should be minimum 6 characters and contain atleast one capital and lowercase alpha, neumeric value\";\r\n           setPassword(value);   \r\n              break;\r\n            case 'repeatPassword':\r\n                msg += value === password\r\n                    ? \"\"\r\n                    : \"Repeat Password is not matched \";\r\n                setRepeatPassword(value);     \r\n                \r\n                break;    \r\n      \r\n          default:\r\n              break;\r\n      }\r\n      setFormErrors(msg)\r\n    }\r\n    \r\n    const submitHandler = ()=>{\r\n      if(!password) {\r\n        setFormErrors(\"Password can not be empty\");\r\n        return\r\n      } else if(password !== repeatPassword){\r\n        setFormErrors(\"Two Password fields must be matched\");\r\n        return\r\n      } else if(formErrors){\r\n        return\r\n      } else{\r\n        axios.post(process.env.REACT_APP_SITE_URL + \"/auth/reset/\" + id, {password, token: id})\r\n        .then(response=>{\r\n            setFormErrors(response.data.message + ' . Redirecting to login page...');\r\n            setResStyle('success');\r\n            setTimeout(()=>{\r\n                props.history.push({ pathname: \"/login\" });\r\n            }, 3000)\r\n            \r\n        })\r\n        .catch(error=>{\r\n            setFormErrors(\"Reset can not be done.Token may be expired\");\r\n            setResStyle('danger');\r\n        })     \r\n      }\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className=\"registration\">\r\n            <NavbarHome isLanding={false} />\r\n            <div className=\"landing\">\r\n                <div className=\"home-inner\"></div>\r\n            </div>\r\n            <div className=\"caption text-center\">\r\n                <h1>Reset Password</h1>\r\n                <div className=\"heading-underline\"></div>\r\n                <div>\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"password\">\r\n                        <CgPassword />\r\n                    </InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                    placeholder=\"Password\"\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    aria-label=\"Password\"\r\n                    aria-describedby=\"password\"\r\n                    onChange = {changeHandler}\r\n                    />\r\n                </InputGroup>\r\n                <InputGroup className=\"mb-3\">\r\n                    <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"repeatPassword\">\r\n                        <CgPassword />\r\n                    </InputGroup.Text>\r\n                    </InputGroup.Prepend>\r\n                    <FormControl\r\n                    placeholder=\"Repeat Password\"\r\n                    type=\"password\"\r\n                    name=\"repeatPassword\"\r\n                    aria-label=\"RepeatPassword\"\r\n                    aria-describedby=\"repeatPassword\"\r\n                    onChange = {changeHandler}\r\n                    />\r\n                </InputGroup>\r\n                { formErrors !== '' &&  <Alert className=\"my-2\" variant={resStyle}> {formErrors} </Alert> }\r\n                <Button variant=\"primary\" onClick={submitHandler}>\r\n                    Submit\r\n                </Button>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}